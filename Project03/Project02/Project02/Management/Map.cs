using System;
using System.Collections;
using System.Linq;
using System.Text;
using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Content;
using Microsoft.Xna.Framework.Graphics;

namespace Project03
{
    public class Map
    {
        public Layers layer;
        public Collision collision;
        
        public static int[,] Mapdata =
        {
            { 1,  1,  1,  1,  1,   1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,   1,  1,  1, -1,  1,  1,   1, -1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1},
            { 1,  1,  1,  1,  1,   1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,   1,  1,  1, -1,  1,  1,   1, -1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1},
            { 1,  1,  1,  1,  1,   1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,   1,  1,  1, -1,  1,  1,   1, -1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1},
            { 1,  1,  1,  1,  1,   1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,   1,  1,  1, -1,  1,  1,   1, -1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1},
            { 1,  1,  1,  1,  1,   1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,   1,  1,  1, -1,  1,  1,   1, -1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1},
            { 1,  1,  1,  1,  1,   1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,   1,  1,  1, -1,  1,  1,   1, -1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1},
            { 1,  1,  1,  1,  1,   1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,   1,  1,  1, -1,  1,  1,   1, -1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1},
            { 1,  1,  1,  1,  1,   1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,   1,  1,  1, -1,  1,  1,   1, -1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1},
            { 1,  1,  1,  1,  1,   1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,   1,  1,  1, -1,  1,  1,   1, -1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1},
            { 1,  1,  1,  1,  1,   1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,   1,  1,  1, -1,  1,  1,   1, -1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1},
            {-1, -1, -1, -1, -1,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  1,  1,   1,  1,  1, -1,  1,  1,   1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  1,  1,  1,  1,  1},
            { 1,  1,  1,  1,  1,   1,  1,  1,  1,  1,  1,  1,  1,  1, -1,  1,  1,   1,  1,  1, -1,  1,  1,   1, -1,  1,  1,  1,  1,  1,  1,  1,  1,  1, -1,  1,  1,  1,  1,  1},
            { 1,  1,  1,  1,  1,   1,  1,  1,  1,  1,  1,  1,  1,  1, -1,  1,  1,   1,  1,  1, -1,  1,  1,   1, -1,  1,  1,  1,  1,  1,  1,  1,  1,  1, -1,  1,  1,  1,  1,  1},
            { 1,  1,  1,  1,  1,   1,  1,  1,  1,  1,  1,  1,  1,  1, -1,  1,  1,   1,  1,  1, -1,  1,  1,   1, -1,  1,  1,  1,  1,  1,  1,  1,  1,  1, -1,  1,  1,  1,  1,  1},
            {-1, -1, -1, -1, -1,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  1,  1,   1,  1,  1, -1, -1, -1,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  1,  1,  1,  1,  1},
            { 1,  1,  1,  1,  1,   1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,   1,  1,  1,  1,  1,  1,   1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1},
            { 1,  1,  1,  1,  1,   1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,   1,  1,  1,  1,  1,  1,   1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1},
            { 1,  1,  1,  1,  1,   1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,   1,  1,  1,  1,  1,  1,   1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1},
            { 1,  1,  1,  1,  1,   1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,   1,  1,  1,  1,  1,  1,   1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1},
            { 1,  1,  1,  1,  1,   1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,   1,  1,  1,  1,  1,  1,   1,  1,  1,  1,  1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            { 1,  1,  1,  1,  1,   1,  1,  1,  1, -1, -1, -1, -1, -1, -1, -1, -1,  -1, -1, -1, -1, -1, -1,  -1,  1,  1,  1,  1, -1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1},
            { 1,  1,  1,  1,  1,   1,  1,  1,  1, -1,  1,  1,  1,  1,  1,  1,  1,   1,  1,  1,  1,  1,  1,  -1,  1,  1,  1,  1, -1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1},
            { 1,  1,  1,  1,  1,   1,  1,  1,  1, -1,  1,  1,  1,  1,  1,  1,  1,   1,  1,  1,  1,  1,  1,  -1,  1,  1,  1,  1, -1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1},
            { 1,  1,  1,  1,  1,   1,  1,  1,  1, -1,  1,  1,  1,  1,  1,  1,  1,   1,  1,  1,  1,  1,  1,  -1,  1,  1,  1,  1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
            { 1,  1,  1,  1,  1,   1,  1,  1,  1, -1, -1, -1, -1, -1, -1, -1, -1,  -1, -1, -1, -1, -1, -1,  -1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1},
            { 1,  1,  1,  1,  1,   1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,   1,  1, -1, -1, -1, -1,  -1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1},
            { 1,  1,  1,  1,  1,   1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,   1,  1, -1,  1,  1,  1,  -1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1},
            { 1,  1,  1,  1,  1,   1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,   1,  1, -1,  1,  1,  1,  -1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1},
            { 1,  1,  1,  1,  1,   1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,   1,  1, -1,  1,  1,  1,  -1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1},
            { 1,  1,  1,  1,  1,   1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,   1,  1, -1,  1,  1,  1,  -1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1},
            { 1,  1,  1,  1,  1,   1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,   1,  1, -1,  1,  1,  1,  -1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1},
            { 1,  1,  1,  1,  1,   1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,   1,  1, -1,  1,  1,  1,  -1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1},
            { 1,  1,  1,  1,  1,   1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,   1,  1, -1,  1,  1,  1,  -1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1},
            { 1,  1,  1,  1,  1,   1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,   1,  1, -1,  1,  1,  1,  -1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1},
            { 1,  1,  1,  1,  1,   1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,   1,  1, -1,  1,  1,  1,  -1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1},
            { 1,  1,  1,  1,  1,   1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,   1,  1, -1,  1,  1,  1,  -1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1},
            { 1,  1,  1,  1,  1,   1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,   1,  1, -1,  1,  1,  1,  -1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1},
            { 1,  1,  1,  1,  1,   1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,   1,  1, -1,  1,  1,  1,  -1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1},
            { 1,  1,  1,  1,  1,   1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,   1,  1, -1,  1,  1,  1,  -1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1},
            { 1,  1,  1,  1,  1,   1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,   1,  1, -1,  1,  1,  1,  -1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1}
        };

        public Map()
        {
            
        }

        public static int getMap(int x, int y)
        {
            int yMax = Mapdata.GetUpperBound(0);
            int xMax = Mapdata.GetUpperBound(1);
            if (x < 0 || x > xMax)
                return -1;
            else if (y < 0 || y > yMax)
                return -1;
            else
                return Mapdata[y, x];
        }
        
        static public void PrintSolution(ArrayList solutionPathList)
        {
            int yMax = Mapdata.GetUpperBound(0);
            int xMax = Mapdata.GetUpperBound(1);
            Node x1 = new Node(null, null, 1, 5, 5);
            Node x2 = new Node(null, null, 1, 30, 5);
            Node x3 = new Node(null, null, 1, 35, 32);
            Node x4 = new Node(null, null, 1, 5, 35);
            
            for(int j = 0; j <= yMax; j++)
            {
                for(int i = 0; i <= xMax; i++)
                {
                    Node tmp = new Node(null, null, 0, i, j);
                    bool solutionNode = false;
                    //tmp.roomNode(i, j);
                    foreach(Node n in solutionPathList)
                    {
                        //Node tmp = new Node(null, null, 0, i, j);
                        if(n.isMatch(tmp))
                        {
                            solutionNode = true;
                            break;
                        }
                        
                    } //foreach
                    if (tmp.roomNode(i, j))
                        Console.Write("G ");
                    else if (solutionNode)
                        Console.Write("o "); // solution path node
                    //else if (solutionNode && returner == true)
                    //    Console.Write("z ");
                    else if (Map.getMap(i, j) == -1)
                        Console.Write("# "); // wall node
                    else
                        Console.Write(". "); // road node
                } // for i
                Console.WriteLine("");
            }// for j
        }//PrintSolution


        public void LoadContent(ContentManager content, string mapID)
        {
            layer = new Layers();
            layer.LoadContent(content, mapID);
            collision = new Collision();
            collision.LoadContent(content, mapID);

        }
        public void UnloadContent()
        {
            layer.UnloadContent();
            //collision.UnloadContent();
        }
        public void Draw(SpriteBatch spriteBatch)
        {
            layer.Draw(spriteBatch);
        }
        public void Update(GameTime gameTime)
        {

        }

    }//Class
}//Namespace
